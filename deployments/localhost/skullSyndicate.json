{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "_royaltyFeesInBips",
          "type": "uint96"
        },
        {
          "internalType": "string",
          "name": "_contractURI",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "_whiteList_root",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_skull_root",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintERC2309QuantityExceedsLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnershipNotInitializedForExtraData",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Wait_Till_Skull_Mint_Starts",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WhiteListers_Still_Have_Time_To_Mint",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "You_can_only_mint_1_NFT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "You_can_only_mint_2_NFT",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "ConsecutiveTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_OwnerAddress",
          "type": "address"
        }
      ],
      "name": "ChangeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "add_WhiteList_Hash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "add_skullList_Hash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "calculateRoyalty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32",
          "name": "leaf",
          "type": "bytes32"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_baseUri",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_contractURI",
          "type": "string"
        }
      ],
      "name": "setContractUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_whiteList_root",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_skull_root",
          "type": "bytes32"
        }
      ],
      "name": "setRootHashes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_royaltyFeesInBips",
          "type": "uint96"
        }
      ],
      "name": "setRoyaltyInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_developer",
          "type": "address"
        }
      ],
      "name": "setStakeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_stamp",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_Skull_List_Time",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_wl",
          "type": "uint32"
        }
      ],
      "name": "setTimer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32",
          "name": "leaf",
          "type": "bytes32"
        }
      ],
      "name": "skullList_MerkleVerify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "suppliedNFTs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "userMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32",
          "name": "leaf",
          "type": "bytes32"
        }
      ],
      "name": "whiteList_MerkleVerify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x87acc565da17fa8fd2a6a70abdba7336c53093b29dd93ebeeee7efce593a5552",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "3567166",
    "logsBloom": "0x
    "blockHash": "0x5cb9001dc9c9f7ab3bc6c74292072d467c1066b9089f5327a3deaa24ff8419cc",
    "transactionHash": "0x87acc565da17fa8fd2a6a70abdba7336c53093b29dd93ebeeee7efce593a5552",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 21,
        "transactionHash": "0x87acc565da17fa8fd2a6a70abdba7336c53093b29dd93ebeeee7efce593a5552",
        "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x5cb9001dc9c9f7ab3bc6c74292072d467c1066b9089f5327a3deaa24ff8419cc"
      }
    ],
    "blockNumber": 21,
    "cumulativeGasUsed": "3567166",
    "status": 1,
    "byzantium": true
  },
  "args": [
    1000,
    "nothing",
    "0xb834f50bde8ff12ee0bfb9e614c52213983a1d960a3f9111e47f126d13922353",
    "0xcd7106ee83b733c716fd9364eee9f331b728ef33f450dcefa0ff868862e0ad95"
  ],
  "numDeployments": 2,
  "solcInputHash": "c575aaad605129f72882ce9c58fedfd9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_royaltyFeesInBips\",\"type\":\"uint96\"},{\"internalType\":\"string\",\"name\":\"_contractURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_whiteList_root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_skull_root\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Wait_Till_Skull_Mint_Starts\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WhiteListers_Still_Have_Time_To_Mint\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"You_can_only_mint_1_NFT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"You_can_only_mint_2_NFT\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_OwnerAddress\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"add_WhiteList_Hash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"add_skullList_Hash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"calculateRoyalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseUri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_contractURI\",\"type\":\"string\"}],\"name\":\"setContractUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_whiteList_root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_skull_root\",\"type\":\"bytes32\"}],\"name\":\"setRootHashes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_royaltyFeesInBips\",\"type\":\"uint96\"}],\"name\":\"setRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_developer\",\"type\":\"address\"}],\"name\":\"setStakeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_stamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_Skull_List_Time\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_wl\",\"type\":\"uint32\"}],\"name\":\"setTimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"}],\"name\":\"skullList_MerkleVerify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"suppliedNFTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"}],\"name\":\"whiteList_MerkleVerify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in `owner`'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}.\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) to learn more about how these ids are created. This function call must use less than 30000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"totalSupply()\":{\"details\":\"Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"MintERC2309QuantityExceedsLimit()\":[{\"notice\":\"The `quantity` minted with ERC2309 exceeds the safety limit.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"OwnershipNotInitializedForExtraData()\":[{\"notice\":\"The `extraData` cannot be set on an unintialized ownership slot.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/indie-skull-contract.sol\":\"skullSyndicate\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x596ed72a251d391b814a4aa19d7acb02ebdcc92ba27d3fff74a6f0c158b12ab7\",\"license\":\"MIT\"},\"contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// ERC721A Contracts v4.2.3\\r\\n// Creator: Chiru Labs\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./IERC721A.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface of ERC721 token receiver.\\r\\n */\\r\\ninterface ERC721A__IERC721Receiver {\\r\\n    function onERC721Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title ERC721A\\r\\n *\\r\\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\\r\\n * Non-Fungible Token Standard, including the Metadata extension.\\r\\n * Optimized for lower gas during batch mints.\\r\\n *\\r\\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\\r\\n * starting from `_startTokenId()`.\\r\\n *\\r\\n * Assumptions:\\r\\n *\\r\\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\r\\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\\r\\n */\\r\\ncontract ERC721A is IERC721A {\\r\\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\\r\\n    struct TokenApprovalRef {\\r\\n        address value;\\r\\n    }\\r\\n\\r\\n    // =============================================================\\r\\n    //                           CONSTANTS\\r\\n    // =============================================================\\r\\n\\r\\n    // Mask of an entry in packed address data.\\r\\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\r\\n\\r\\n    // The bit position of `numberMinted` in packed address data.\\r\\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\\r\\n\\r\\n    // The bit position of `numberBurned` in packed address data.\\r\\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\\r\\n\\r\\n    // The bit position of `aux` in packed address data.\\r\\n    uint256 private constant _BITPOS_AUX = 192;\\r\\n\\r\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\r\\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\r\\n\\r\\n    // The bit position of `startTimestamp` in packed ownership.\\r\\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\\r\\n\\r\\n    // The bit mask of the `burned` bit in packed ownership.\\r\\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\\r\\n\\r\\n    // The bit position of the `nextInitialized` bit in packed ownership.\\r\\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\\r\\n\\r\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\r\\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\\r\\n\\r\\n    // The bit position of `extraData` in packed ownership.\\r\\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\\r\\n\\r\\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\\r\\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\\r\\n\\r\\n    // The mask of the lower 160 bits for addresses.\\r\\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\\r\\n\\r\\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\\r\\n    // This limit is to prevent overflows on the address data entries.\\r\\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\\r\\n    // is required to cause an overflow, which is unrealistic.\\r\\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\\r\\n\\r\\n    // The `Transfer` event signature is given by:\\r\\n    // `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\r\\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\\r\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\r\\n\\r\\n    // =============================================================\\r\\n    //                            STORAGE\\r\\n    // =============================================================\\r\\n\\r\\n    // The next token ID to be minted.\\r\\n    uint256 private _currentIndex;\\r\\n\\r\\n    // The number of tokens burned.\\r\\n    uint256 private _burnCounter;\\r\\n\\r\\n    // Token name\\r\\n    string private _name;\\r\\n\\r\\n    // Token symbol\\r\\n    string private _symbol;\\r\\n\\r\\n    // Mapping from token ID to ownership details\\r\\n    // An empty struct value does not necessarily mean the token is unowned.\\r\\n    // See {_packedOwnershipOf} implementation for details.\\r\\n    //\\r\\n    // Bits Layout:\\r\\n    // - [0..159]   `addr`\\r\\n    // - [160..223] `startTimestamp`\\r\\n    // - [224]      `burned`\\r\\n    // - [225]      `nextInitialized`\\r\\n    // - [232..255] `extraData`\\r\\n    mapping(uint256 => uint256) private _packedOwnerships;\\r\\n\\r\\n    // Mapping owner address to address data.\\r\\n    //\\r\\n    // Bits Layout:\\r\\n    // - [0..63]    `balance`\\r\\n    // - [64..127]  `numberMinted`\\r\\n    // - [128..191] `numberBurned`\\r\\n    // - [192..255] `aux`\\r\\n    mapping(address => uint256) private _packedAddressData;\\r\\n\\r\\n    // Mapping from token ID to approved address.\\r\\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\\r\\n\\r\\n    // Mapping from owner to operator approvals\\r\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\r\\n\\r\\n    // =============================================================\\r\\n    //                          CONSTRUCTOR\\r\\n    // =============================================================\\r\\n\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _currentIndex = _startTokenId();\\r\\n    }\\r\\n\\r\\n    // =============================================================\\r\\n    //                   TOKEN COUNTING OPERATIONS\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the starting token ID.\\r\\n     * To change the starting token ID, please override this function.\\r\\n     */\\r\\n    function _startTokenId() internal view virtual returns (uint256) {\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the next token ID to be minted.\\r\\n     */\\r\\n    function _nextTokenId() internal view virtual returns (uint256) {\\r\\n        return _currentIndex;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total number of tokens in existence.\\r\\n     * Burned tokens will reduce the count.\\r\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\r\\n        // more than `_currentIndex - _startTokenId()` times.\\r\\n        unchecked {\\r\\n            return _currentIndex - _burnCounter - _startTokenId();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total amount of tokens minted in the contract.\\r\\n     */\\r\\n    function _totalMinted() internal view virtual returns (uint256) {\\r\\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\\r\\n        // and it is initialized to `_startTokenId()`.\\r\\n        unchecked {\\r\\n            return _currentIndex - _startTokenId();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total number of tokens burned.\\r\\n     */\\r\\n    function _totalBurned() internal view virtual returns (uint256) {\\r\\n        return _burnCounter;\\r\\n    }\\r\\n\\r\\n    // =============================================================\\r\\n    //                    ADDRESS DATA OPERATIONS\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of tokens in `owner`'s account.\\r\\n     */\\r\\n    function balanceOf(address owner)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\r\\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the number of tokens minted by `owner`.\\r\\n     */\\r\\n    function _numberMinted(address owner) internal view returns (uint256) {\\r\\n        return\\r\\n            (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) &\\r\\n            _BITMASK_ADDRESS_DATA_ENTRY;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\r\\n     */\\r\\n    function _numberBurned(address owner) internal view returns (uint256) {\\r\\n        return\\r\\n            (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) &\\r\\n            _BITMASK_ADDRESS_DATA_ENTRY;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\r\\n     */\\r\\n    function _getAux(address owner) internal view returns (uint64) {\\r\\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\r\\n     * If there are multiple variables, please pack them into a uint64.\\r\\n     */\\r\\n    function _setAux(address owner, uint64 aux) internal virtual {\\r\\n        uint256 packed = _packedAddressData[owner];\\r\\n        uint256 auxCasted;\\r\\n        // Cast `aux` with assembly to avoid redundant masking.\\r\\n        assembly {\\r\\n            auxCasted := aux\\r\\n        }\\r\\n        packed =\\r\\n            (packed & _BITMASK_AUX_COMPLEMENT) |\\r\\n            (auxCasted << _BITPOS_AUX);\\r\\n        _packedAddressData[owner] = packed;\\r\\n    }\\r\\n\\r\\n    // =============================================================\\r\\n    //                            IERC165\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        // The interface IDs are constants representing the first 4 bytes\\r\\n        // of the XOR of all function selectors in the interface.\\r\\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\\r\\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\\r\\n        return\\r\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\r\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\r\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\r\\n    }\\r\\n\\r\\n    // =============================================================\\r\\n    //                        IERC721Metadata\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token collection name.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token collection symbol.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\r\\n\\r\\n        string memory baseURI = _baseURI();\\r\\n        return\\r\\n            bytes(baseURI).length != 0\\r\\n                ? string(abi.encodePacked(baseURI, _toString(tokenId)))\\r\\n                : \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\r\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\r\\n     * by default, it can be overridden in child contracts.\\r\\n     */\\r\\n    function _baseURI() internal view virtual returns (string memory) {\\r\\n        return \\\"\\\";\\r\\n    }\\r\\n\\r\\n    // =============================================================\\r\\n    //                     OWNERSHIPS OPERATIONS\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (address)\\r\\n    {\\r\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\\r\\n     * It gradually moves to O(1) as tokens get transferred around over time.\\r\\n     */\\r\\n    function _ownershipOf(uint256 tokenId)\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        returns (TokenOwnership memory)\\r\\n    {\\r\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\\r\\n     */\\r\\n    function _ownershipAt(uint256 index)\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        returns (TokenOwnership memory)\\r\\n    {\\r\\n        return _unpackedOwnership(_packedOwnerships[index]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\r\\n     */\\r\\n    function _initializeOwnershipAt(uint256 index) internal virtual {\\r\\n        if (_packedOwnerships[index] == 0) {\\r\\n            _packedOwnerships[index] = _packedOwnershipOf(index);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the packed ownership data of `tokenId`.\\r\\n     */\\r\\n    function _packedOwnershipOf(uint256 tokenId)\\r\\n        private\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 curr = tokenId;\\r\\n\\r\\n        unchecked {\\r\\n            if (_startTokenId() <= curr)\\r\\n                if (curr < _currentIndex) {\\r\\n                    uint256 packed = _packedOwnerships[curr];\\r\\n                    // If not burned.\\r\\n                    if (packed & _BITMASK_BURNED == 0) {\\r\\n                        // Invariant:\\r\\n                        // There will always be an initialized ownership slot\\r\\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\\r\\n                        // before an unintialized ownership slot\\r\\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\\r\\n                        // Hence, `curr` will not underflow.\\r\\n                        //\\r\\n                        // We can directly compare the packed value.\\r\\n                        // If the address is zero, packed will be zero.\\r\\n                        while (packed == 0) {\\r\\n                            packed = _packedOwnerships[--curr];\\r\\n                        }\\r\\n                        return packed;\\r\\n                    }\\r\\n                }\\r\\n        }\\r\\n        revert OwnerQueryForNonexistentToken();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\\r\\n     */\\r\\n    function _unpackedOwnership(uint256 packed)\\r\\n        private\\r\\n        pure\\r\\n        returns (TokenOwnership memory ownership)\\r\\n    {\\r\\n        ownership.addr = address(uint160(packed));\\r\\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\\r\\n        ownership.burned = packed & _BITMASK_BURNED != 0;\\r\\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Packs ownership data into a single uint256.\\r\\n     */\\r\\n    function _packOwnershipData(address owner, uint256 flags)\\r\\n        private\\r\\n        view\\r\\n        returns (uint256 result)\\r\\n    {\\r\\n        assembly {\\r\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\r\\n            owner := and(owner, _BITMASK_ADDRESS)\\r\\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\\r\\n            result := or(\\r\\n                owner,\\r\\n                or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags)\\r\\n            )\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\\r\\n     */\\r\\n    function _nextInitializedFlag(uint256 quantity)\\r\\n        private\\r\\n        pure\\r\\n        returns (uint256 result)\\r\\n    {\\r\\n        // For branchless setting of the `nextInitialized` flag.\\r\\n        assembly {\\r\\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\\r\\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // =============================================================\\r\\n    //                      APPROVAL OPERATIONS\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\r\\n     * The approval is cleared when the token is transferred.\\r\\n     *\\r\\n     * Only a single account can be approved at a time, so approving the\\r\\n     * zero address clears previous approvals.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The caller must own the token or be an approved operator.\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId)\\r\\n        public\\r\\n        payable\\r\\n        virtual\\r\\n        override\\r\\n    {\\r\\n        address owner = ownerOf(tokenId);\\r\\n\\r\\n        if (_msgSenderERC721A() != owner)\\r\\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\r\\n                revert ApprovalCallerNotOwnerNorApproved();\\r\\n            }\\r\\n\\r\\n        _tokenApprovals[tokenId].value = to;\\r\\n        emit Approval(owner, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the account approved for `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (address)\\r\\n    {\\r\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\r\\n\\r\\n        return _tokenApprovals[tokenId].value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve or remove `operator` as an operator for the caller.\\r\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\r\\n     * for any token owned by the caller.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The `operator` cannot be the caller.\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved)\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n    {\\r\\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\\r\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n     *\\r\\n     * See {setApprovalForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _operatorApprovals[owner][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `tokenId` exists.\\r\\n     *\\r\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Tokens start existing when they are minted. See {_mint}.\\r\\n     */\\r\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\r\\n        return\\r\\n            _startTokenId() <= tokenId &&\\r\\n            tokenId < _currentIndex && // If within bounds,\\r\\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\\r\\n     */\\r\\n    function _isSenderApprovedOrOwner(\\r\\n        address approvedAddress,\\r\\n        address owner,\\r\\n        address msgSender\\r\\n    ) private pure returns (bool result) {\\r\\n        assembly {\\r\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\r\\n            owner := and(owner, _BITMASK_ADDRESS)\\r\\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\\r\\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\\r\\n            // `msgSender == owner || msgSender == approvedAddress`.\\r\\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\\r\\n     */\\r\\n    function _getApprovedSlotAndAddress(uint256 tokenId)\\r\\n        private\\r\\n        view\\r\\n        returns (uint256 approvedAddressSlot, address approvedAddress)\\r\\n    {\\r\\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\\r\\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\\r\\n        assembly {\\r\\n            approvedAddressSlot := tokenApproval.slot\\r\\n            approvedAddress := sload(approvedAddressSlot)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // =============================================================\\r\\n    //                      TRANSFER OPERATIONS\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` from `from` to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token\\r\\n     * by either {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public payable virtual override {\\r\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\r\\n\\r\\n        if (address(uint160(prevOwnershipPacked)) != from)\\r\\n            revert TransferFromIncorrectOwner();\\r\\n\\r\\n        (\\r\\n            uint256 approvedAddressSlot,\\r\\n            address approvedAddress\\r\\n        ) = _getApprovedSlotAndAddress(tokenId);\\r\\n\\r\\n        // The nested ifs save around 20+ gas over a compound boolean condition.\\r\\n        if (\\r\\n            !_isSenderApprovedOrOwner(\\r\\n                approvedAddress,\\r\\n                from,\\r\\n                _msgSenderERC721A()\\r\\n            )\\r\\n        )\\r\\n            if (!isApprovedForAll(from, _msgSenderERC721A()))\\r\\n                revert TransferCallerNotOwnerNorApproved();\\r\\n\\r\\n        if (to == address(0)) revert TransferToZeroAddress();\\r\\n\\r\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\r\\n\\r\\n        // Clear approvals from the previous owner.\\r\\n        assembly {\\r\\n            if approvedAddress {\\r\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\r\\n                sstore(approvedAddressSlot, 0)\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Underflow of the sender's balance is impossible because we check for\\r\\n        // ownership above and the recipient's balance can't realistically overflow.\\r\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\r\\n        unchecked {\\r\\n            // We can directly increment and decrement the balances.\\r\\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\\r\\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\\r\\n\\r\\n            // Updates:\\r\\n            // - `address` to the next owner.\\r\\n            // - `startTimestamp` to the timestamp of transfering.\\r\\n            // - `burned` to `false`.\\r\\n            // - `nextInitialized` to `true`.\\r\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\r\\n                to,\\r\\n                _BITMASK_NEXT_INITIALIZED |\\r\\n                    _nextExtraData(from, to, prevOwnershipPacked)\\r\\n            );\\r\\n\\r\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\r\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\r\\n                uint256 nextTokenId = tokenId + 1;\\r\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\r\\n                if (_packedOwnerships[nextTokenId] == 0) {\\r\\n                    // If the next slot is within bounds.\\r\\n                    if (nextTokenId != _currentIndex) {\\r\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\r\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n        _afterTokenTransfers(from, to, tokenId, 1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public payable virtual override {\\r\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token\\r\\n     * by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement\\r\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) public payable virtual override {\\r\\n        transferFrom(from, to, tokenId);\\r\\n        if (to.code.length != 0)\\r\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\r\\n                revert TransferToNonERC721ReceiverImplementer();\\r\\n            }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before a set of serially-ordered token IDs\\r\\n     * are about to be transferred. This includes minting.\\r\\n     * And also called before burning one token.\\r\\n     *\\r\\n     * `startTokenId` - the first token ID to be transferred.\\r\\n     * `quantity` - the amount to be transferred.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     */\\r\\n    function _beforeTokenTransfers(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 startTokenId,\\r\\n        uint256 quantity\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after a set of serially-ordered token IDs\\r\\n     * have been transferred. This includes minting.\\r\\n     * And also called after one token has been burned.\\r\\n     *\\r\\n     * `startTokenId` - the first token ID to be transferred.\\r\\n     * `quantity` - the amount to be transferred.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\r\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     */\\r\\n    function _afterTokenTransfers(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 startTokenId,\\r\\n        uint256 quantity\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\r\\n     *\\r\\n     * `from` - Previous owner of the given token ID.\\r\\n     * `to` - Target address that will receive the token.\\r\\n     * `tokenId` - Token ID to be transferred.\\r\\n     * `_data` - Optional data to send along with the call.\\r\\n     *\\r\\n     * Returns whether the call correctly returned the expected magic value.\\r\\n     */\\r\\n    function _checkContractOnERC721Received(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) private returns (bool) {\\r\\n        try\\r\\n            ERC721A__IERC721Receiver(to).onERC721Received(\\r\\n                _msgSenderERC721A(),\\r\\n                from,\\r\\n                tokenId,\\r\\n                _data\\r\\n            )\\r\\n        returns (bytes4 retval) {\\r\\n            return\\r\\n                retval ==\\r\\n                ERC721A__IERC721Receiver(to).onERC721Received.selector;\\r\\n        } catch (bytes memory reason) {\\r\\n            if (reason.length == 0) {\\r\\n                revert TransferToNonERC721ReceiverImplementer();\\r\\n            } else {\\r\\n                assembly {\\r\\n                    revert(add(32, reason), mload(reason))\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // =============================================================\\r\\n    //                        MINT OPERATIONS\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `quantity` must be greater than 0.\\r\\n     *\\r\\n     * Emits a {Transfer} event for each mint.\\r\\n     */\\r\\n    function _mint(address to, uint256 quantity) internal virtual {\\r\\n        uint256 startTokenId = _currentIndex;\\r\\n        if (quantity == 0) revert MintZeroQuantity();\\r\\n\\r\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n\\r\\n        // Overflows are incredibly unrealistic.\\r\\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\\r\\n        // `tokenId` has a maximum limit of 2**256.\\r\\n        unchecked {\\r\\n            // Updates:\\r\\n            // - `balance += quantity`.\\r\\n            // - `numberMinted += quantity`.\\r\\n            //\\r\\n            // We can directly add to the `balance` and `numberMinted`.\\r\\n            _packedAddressData[to] +=\\r\\n                quantity *\\r\\n                ((1 << _BITPOS_NUMBER_MINTED) | 1);\\r\\n\\r\\n            // Updates:\\r\\n            // - `address` to the owner.\\r\\n            // - `startTimestamp` to the timestamp of minting.\\r\\n            // - `burned` to `false`.\\r\\n            // - `nextInitialized` to `quantity == 1`.\\r\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\r\\n                to,\\r\\n                _nextInitializedFlag(quantity) |\\r\\n                    _nextExtraData(address(0), to, 0)\\r\\n            );\\r\\n\\r\\n            uint256 toMasked;\\r\\n            uint256 end = startTokenId + quantity;\\r\\n\\r\\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\\r\\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\\r\\n            // The assembly, together with the surrounding Solidity code, have been\\r\\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\\r\\n            assembly {\\r\\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\\r\\n                toMasked := and(to, _BITMASK_ADDRESS)\\r\\n                // Emit the `Transfer` event.\\r\\n                log4(\\r\\n                    0, // Start of data (0, since no data).\\r\\n                    0, // End of data (0, since no data).\\r\\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\\r\\n                    0, // `address(0)`.\\r\\n                    toMasked, // `to`.\\r\\n                    startTokenId // `tokenId`.\\r\\n                )\\r\\n\\r\\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\\r\\n                // that overflows uint256 will make the loop run out of gas.\\r\\n                // The compiler will optimize the `iszero` away for performance.\\r\\n                for {\\r\\n                    let tokenId := add(startTokenId, 1)\\r\\n                } iszero(eq(tokenId, end)) {\\r\\n                    tokenId := add(tokenId, 1)\\r\\n                } {\\r\\n                    // Emit the `Transfer` event. Similar to above.\\r\\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\\r\\n                }\\r\\n            }\\r\\n            if (toMasked == 0) revert MintToZeroAddress();\\r\\n\\r\\n            _currentIndex = end;\\r\\n        }\\r\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\r\\n     *\\r\\n     * This function is intended for efficient minting only during contract creation.\\r\\n     *\\r\\n     * It emits only one {ConsecutiveTransfer} as defined in\\r\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\\r\\n     * instead of a sequence of {Transfer} event(s).\\r\\n     *\\r\\n     * Calling this function outside of contract creation WILL make your contract\\r\\n     * non-compliant with the ERC721 standard.\\r\\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\\r\\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `quantity` must be greater than 0.\\r\\n     *\\r\\n     * Emits a {ConsecutiveTransfer} event.\\r\\n     */\\r\\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\\r\\n        uint256 startTokenId = _currentIndex;\\r\\n        if (to == address(0)) revert MintToZeroAddress();\\r\\n        if (quantity == 0) revert MintZeroQuantity();\\r\\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT)\\r\\n            revert MintERC2309QuantityExceedsLimit();\\r\\n\\r\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n\\r\\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\\r\\n        unchecked {\\r\\n            // Updates:\\r\\n            // - `balance += quantity`.\\r\\n            // - `numberMinted += quantity`.\\r\\n            //\\r\\n            // We can directly add to the `balance` and `numberMinted`.\\r\\n            _packedAddressData[to] +=\\r\\n                quantity *\\r\\n                ((1 << _BITPOS_NUMBER_MINTED) | 1);\\r\\n\\r\\n            // Updates:\\r\\n            // - `address` to the owner.\\r\\n            // - `startTimestamp` to the timestamp of minting.\\r\\n            // - `burned` to `false`.\\r\\n            // - `nextInitialized` to `quantity == 1`.\\r\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\r\\n                to,\\r\\n                _nextInitializedFlag(quantity) |\\r\\n                    _nextExtraData(address(0), to, 0)\\r\\n            );\\r\\n\\r\\n            emit ConsecutiveTransfer(\\r\\n                startTokenId,\\r\\n                startTokenId + quantity - 1,\\r\\n                address(0),\\r\\n                to\\r\\n            );\\r\\n\\r\\n            _currentIndex = startTokenId + quantity;\\r\\n        }\\r\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - If `to` refers to a smart contract, it must implement\\r\\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\r\\n     * - `quantity` must be greater than 0.\\r\\n     *\\r\\n     * See {_mint}.\\r\\n     *\\r\\n     * Emits a {Transfer} event for each mint.\\r\\n     */\\r\\n    function _safeMint(\\r\\n        address to,\\r\\n        uint256 quantity,\\r\\n        bytes memory _data\\r\\n    ) internal virtual {\\r\\n        _mint(to, quantity);\\r\\n\\r\\n        unchecked {\\r\\n            if (to.code.length != 0) {\\r\\n                uint256 end = _currentIndex;\\r\\n                uint256 index = end - quantity;\\r\\n                do {\\r\\n                    if (\\r\\n                        !_checkContractOnERC721Received(\\r\\n                            address(0),\\r\\n                            to,\\r\\n                            index++,\\r\\n                            _data\\r\\n                        )\\r\\n                    ) {\\r\\n                        revert TransferToNonERC721ReceiverImplementer();\\r\\n                    }\\r\\n                } while (index < end);\\r\\n                // Reentrancy protection.\\r\\n                if (_currentIndex != end) revert();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\r\\n     */\\r\\n    function _safeMint(address to, uint256 quantity) internal virtual {\\r\\n        _safeMint(to, quantity, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    // =============================================================\\r\\n    //                        BURN OPERATIONS\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\r\\n     */\\r\\n    function _burn(uint256 tokenId) internal virtual {\\r\\n        _burn(tokenId, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `tokenId`.\\r\\n     * The approval is cleared when the token is burned.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\r\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\r\\n\\r\\n        address from = address(uint160(prevOwnershipPacked));\\r\\n\\r\\n        (\\r\\n            uint256 approvedAddressSlot,\\r\\n            address approvedAddress\\r\\n        ) = _getApprovedSlotAndAddress(tokenId);\\r\\n\\r\\n        if (approvalCheck) {\\r\\n            // The nested ifs save around 20+ gas over a compound boolean condition.\\r\\n            if (\\r\\n                !_isSenderApprovedOrOwner(\\r\\n                    approvedAddress,\\r\\n                    from,\\r\\n                    _msgSenderERC721A()\\r\\n                )\\r\\n            )\\r\\n                if (!isApprovedForAll(from, _msgSenderERC721A()))\\r\\n                    revert TransferCallerNotOwnerNorApproved();\\r\\n        }\\r\\n\\r\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\r\\n\\r\\n        // Clear approvals from the previous owner.\\r\\n        assembly {\\r\\n            if approvedAddress {\\r\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\r\\n                sstore(approvedAddressSlot, 0)\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Underflow of the sender's balance is impossible because we check for\\r\\n        // ownership above and the recipient's balance can't realistically overflow.\\r\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\r\\n        unchecked {\\r\\n            // Updates:\\r\\n            // - `balance -= 1`.\\r\\n            // - `numberBurned += 1`.\\r\\n            //\\r\\n            // We can directly decrement the balance, and increment the number burned.\\r\\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\\r\\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\\r\\n\\r\\n            // Updates:\\r\\n            // - `address` to the last owner.\\r\\n            // - `startTimestamp` to the timestamp of burning.\\r\\n            // - `burned` to `true`.\\r\\n            // - `nextInitialized` to `true`.\\r\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\r\\n                from,\\r\\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) |\\r\\n                    _nextExtraData(from, address(0), prevOwnershipPacked)\\r\\n            );\\r\\n\\r\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\r\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\r\\n                uint256 nextTokenId = tokenId + 1;\\r\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\r\\n                if (_packedOwnerships[nextTokenId] == 0) {\\r\\n                    // If the next slot is within bounds.\\r\\n                    if (nextTokenId != _currentIndex) {\\r\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\r\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, address(0), tokenId);\\r\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\r\\n\\r\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\r\\n        unchecked {\\r\\n            _burnCounter++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // =============================================================\\r\\n    //                     EXTRA DATA OPERATIONS\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Directly sets the extra data for the ownership data `index`.\\r\\n     */\\r\\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\\r\\n        uint256 packed = _packedOwnerships[index];\\r\\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\\r\\n        uint256 extraDataCasted;\\r\\n        // Cast `extraData` with assembly to avoid redundant masking.\\r\\n        assembly {\\r\\n            extraDataCasted := extraData\\r\\n        }\\r\\n        packed =\\r\\n            (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) |\\r\\n            (extraDataCasted << _BITPOS_EXTRA_DATA);\\r\\n        _packedOwnerships[index] = packed;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\\r\\n     * Intended to be overridden by the cosumer contract.\\r\\n     *\\r\\n     * `previousExtraData` - the value of `extraData` before transfer.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     */\\r\\n    function _extraData(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint24 previousExtraData\\r\\n    ) internal view virtual returns (uint24) {}\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the next extra data for the packed ownership data.\\r\\n     * The returned result is shifted into position.\\r\\n     */\\r\\n    function _nextExtraData(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 prevOwnershipPacked\\r\\n    ) private view returns (uint256) {\\r\\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\\r\\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\\r\\n    }\\r\\n\\r\\n    // =============================================================\\r\\n    //                       OTHER OPERATIONS\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\r\\n     *\\r\\n     * If you are writing GSN compatible contracts, you need to override this function.\\r\\n     */\\r\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a uint256 to its ASCII string decimal representation.\\r\\n     */\\r\\n    function _toString(uint256 value)\\r\\n        internal\\r\\n        pure\\r\\n        virtual\\r\\n        returns (string memory str)\\r\\n    {\\r\\n        assembly {\\r\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\r\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\r\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\r\\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\\r\\n            let m := add(mload(0x40), 0xa0)\\r\\n            // Update the free memory pointer to allocate.\\r\\n            mstore(0x40, m)\\r\\n            // Assign the `str` to the end.\\r\\n            str := sub(m, 0x20)\\r\\n            // Zeroize the slot after the string.\\r\\n            mstore(str, 0)\\r\\n\\r\\n            // Cache the end of the memory to calculate the length later.\\r\\n            let end := str\\r\\n\\r\\n            // We write the string from rightmost digit to leftmost digit.\\r\\n            // The following is essentially a do-while loop that also handles the zero case.\\r\\n            // prettier-ignore\\r\\n            for { let temp := value } 1 {} {\\r\\n                str := sub(str, 1)\\r\\n                // Write the character to the pointer.\\r\\n                // The ASCII index of the '0' character is 48.\\r\\n                mstore8(str, add(48, mod(temp, 10)))\\r\\n                // Keep dividing `temp` until zero.\\r\\n                temp := div(temp, 10)\\r\\n                // prettier-ignore\\r\\n                if iszero(temp) { break }\\r\\n            }\\r\\n\\r\\n            let length := sub(end, str)\\r\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\r\\n            str := sub(str, 0x20)\\r\\n            // Store the length.\\r\\n            mstore(str, length)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd0f2bfaed01887bb0ef2858bed6950a49e221edb2aedd4cd3431713ee850e53d\",\"license\":\"MIT\"},\"contracts/IERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// ERC721A Contracts v4.2.3\\r\\n// Creator: Chiru Labs\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/**\\r\\n * @dev Interface of ERC721A.\\r\\n */\\r\\ninterface IERC721A {\\r\\n    /**\\r\\n     * The caller must own the token or be an approved operator.\\r\\n     */\\r\\n    error ApprovalCallerNotOwnerNorApproved();\\r\\n\\r\\n    /**\\r\\n     * The token does not exist.\\r\\n     */\\r\\n    error ApprovalQueryForNonexistentToken();\\r\\n\\r\\n    /**\\r\\n     * Cannot query the balance for the zero address.\\r\\n     */\\r\\n    error BalanceQueryForZeroAddress();\\r\\n\\r\\n    /**\\r\\n     * Cannot mint to the zero address.\\r\\n     */\\r\\n    error MintToZeroAddress();\\r\\n\\r\\n    /**\\r\\n     * The quantity of tokens minted must be more than zero.\\r\\n     */\\r\\n    error MintZeroQuantity();\\r\\n\\r\\n    /**\\r\\n     * The token does not exist.\\r\\n     */\\r\\n    error OwnerQueryForNonexistentToken();\\r\\n\\r\\n    /**\\r\\n     * The caller must own the token or be an approved operator.\\r\\n     */\\r\\n    error TransferCallerNotOwnerNorApproved();\\r\\n\\r\\n    /**\\r\\n     * The token must be owned by `from`.\\r\\n     */\\r\\n    error TransferFromIncorrectOwner();\\r\\n\\r\\n    /**\\r\\n     * Cannot safely transfer to a contract that does not implement the\\r\\n     * ERC721Receiver interface.\\r\\n     */\\r\\n    error TransferToNonERC721ReceiverImplementer();\\r\\n\\r\\n    /**\\r\\n     * Cannot transfer to the zero address.\\r\\n     */\\r\\n    error TransferToZeroAddress();\\r\\n\\r\\n    /**\\r\\n     * The token does not exist.\\r\\n     */\\r\\n    error URIQueryForNonexistentToken();\\r\\n\\r\\n    /**\\r\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\r\\n     */\\r\\n    error MintERC2309QuantityExceedsLimit();\\r\\n\\r\\n    /**\\r\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\r\\n     */\\r\\n    error OwnershipNotInitializedForExtraData();\\r\\n\\r\\n    // =============================================================\\r\\n    //                            STRUCTS\\r\\n    // =============================================================\\r\\n\\r\\n    struct TokenOwnership {\\r\\n        // The address of the owner.\\r\\n        address addr;\\r\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\r\\n        uint64 startTimestamp;\\r\\n        // Whether the token has been burned.\\r\\n        bool burned;\\r\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\r\\n        uint24 extraData;\\r\\n    }\\r\\n\\r\\n    // =============================================================\\r\\n    //                         TOKEN COUNTERS\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total number of tokens in existence.\\r\\n     * Burned tokens will reduce the count.\\r\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    // =============================================================\\r\\n    //                            IERC165\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n\\r\\n    // =============================================================\\r\\n    //                            IERC721\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n     */\\r\\n    event Transfer(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 indexed tokenId\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed approved,\\r\\n        uint256 indexed tokenId\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables or disables\\r\\n     * (`approved`) `operator` to manage all of its assets.\\r\\n     */\\r\\n    event ApprovalForAll(\\r\\n        address indexed owner,\\r\\n        address indexed operator,\\r\\n        bool approved\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of tokens in `owner`'s account.\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\r\\n     * checking first that contract recipients are aware of the ERC721 protocol\\r\\n     * to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be have been allowed to move\\r\\n     * this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement\\r\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external payable;\\r\\n\\r\\n    /**\\r\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external payable;\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` from `from` to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\r\\n     * whenever possible.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token\\r\\n     * by either {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external payable;\\r\\n\\r\\n    /**\\r\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\r\\n     * The approval is cleared when the token is transferred.\\r\\n     *\\r\\n     * Only a single account can be approved at a time, so approving the\\r\\n     * zero address clears previous approvals.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The caller must own the token or be an approved operator.\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) external payable;\\r\\n\\r\\n    /**\\r\\n     * @dev Approve or remove `operator` as an operator for the caller.\\r\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\r\\n     * for any token owned by the caller.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The `operator` cannot be the caller.\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool _approved) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the account approved for `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (address operator);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n     *\\r\\n     * See {setApprovalForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n\\r\\n    // =============================================================\\r\\n    //                        IERC721Metadata\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token collection name.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token collection symbol.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\r\\n\\r\\n    // =============================================================\\r\\n    //                           IERC2309\\r\\n    // =============================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\r\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\r\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\r\\n     *\\r\\n     * See {_mintERC2309} for more details.\\r\\n     */\\r\\n    event ConsecutiveTransfer(\\r\\n        uint256 indexed fromTokenId,\\r\\n        uint256 toTokenId,\\r\\n        address indexed from,\\r\\n        address indexed to\\r\\n    );\\r\\n}\\r\\n\",\"keccak256\":\"0x16071477dd1b67fb42fe816c556a96a71a04b1de3148467a5af7fc4144a99e7c\",\"license\":\"MIT\"},\"contracts/indie-skull-contract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ERC721A.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\nerror You_can_only_mint_1_NFT();\\nerror You_can_only_mint_2_NFT();\\nerror You_are_not_genuine();\\nerror Not_Enough_Ethers_Sent();\\nerror Mint_Not_Yet_Started();\\nerror Not_Enough_Tokens_Left();\\nerror Wait_Till_Skull_Mint_Starts();\\nerror WhiteListers_Still_Have_Time_To_Mint();\\n\\ncontract skullSyndicate is ERC721A, Ownable {\\n    uint256 internal MAX_MINTS = 2;\\n    uint256 internal Public_Mints;\\n    uint256 internal Skull_Mints;\\n    uint256 internal WL_Mints;\\n    uint256 internal MAX_SUPPLY = 2500;\\n    uint256 internal mint_Price = 0.015 ether;\\n    uint256 internal skull_List_Mint_Price = 0.009 ether;\\n    uint32 internal mint_Time = 1664618786;\\n    uint32 internal Skull_List_Time = 1664591786;\\n    uint32 internal whiteList_Time = 1664598986;\\n    // bool internal paused = false;\\n    address internal DeveloperAddress =\\n        0xB96DfC3e4cBE9Da6F072d57c13b5EfB44c8b192C;\\n    address internal OwnerAddress = 0x2E3D02c126E75Ad3B4c95DB3A78E83044d39bf31;\\n    uint96 internal royaltyFeesInBips;\\n    address internal royaltyReceiver;\\n    // uint256 number;\\n    uint256 internal amount;\\n    string internal contractURI;\\n    bytes32 internal whiteList_root;\\n    bytes32 internal skull_root;\\n    bool internal checkWL;\\n    bool internal checkSkull;\\n\\n    string internal baseURI =\\n        \\\"https://itssomethingnft.mypinata.cloud/ipfs/QmRqbzdQ9GiHcLjm7EfzyYQ1NrjvBCdhfaqXPuR56WKm46/\\\";\\n\\n    // mapping(address => bool) public whitelisted;\\n\\n    constructor(\\n        uint96 _royaltyFeesInBips,\\n        string memory _contractURI,\\n        bytes32 _whiteList_root,\\n        bytes32 _skull_root\\n    ) ERC721A(\\\"Indie Skull Syndicate\\\", \\\"ISS\\\") {\\n        royaltyFeesInBips = _royaltyFeesInBips;\\n        contractURI = _contractURI;\\n        whiteList_root = _whiteList_root;\\n        skull_root = _skull_root;\\n        royaltyReceiver = msg.sender;\\n    }\\n\\n    function mint(\\n        uint256 quantity,\\n        bytes32[] memory proof,\\n        bytes32 leaf\\n    ) external payable {\\n        // _safeMint's second argument takes in a quantity, not a tokenId.\\n\\n        // if (totalSupply() + quantity <= MAX_SUPPLY) {\\n        //     revert Not_Enough_Tokens_Left();\\n        // }\\n        require(\\n            totalSupply() + quantity <= MAX_SUPPLY,\\n            \\\"Not Enough Tokens Left\\\"\\n        );\\n\\n        // if (keccak256(abi.encodePacked(msg.sender)) == leaf) {\\n        //     revert You_are_not_genuine();\\n        // }\\n        // require(\\n        //     keccak256(abi.encodePacked(msg.sender)) == leaf,\\n        //     \\\"You are not genuine\\\"\\n        // );\\n\\n        checkWL = whiteList_MerkleVerify(proof, leaf);\\n        checkSkull = skullList_MerkleVerify(proof, leaf);\\n\\n        if (checkSkull == true) {\\n            amount = skull_List_Mint_Price * quantity;\\n        } else if (checkWL == true) {\\n            amount = 0;\\n        } else {\\n            amount = mint_Price * quantity;\\n        }\\n\\n        if (checkWL == true) {\\n            if (_numberMinted(msg.sender) == 1) {\\n                require(\\n                    _numberMinted(msg.sender) != 1,\\n                    \\\"You can only mint 1 NFT\\\"\\n                );\\n                revert You_can_only_mint_1_NFT();\\n            }\\n        } else {\\n            if (quantity + _numberMinted(msg.sender) > MAX_MINTS) {\\n                require(\\n                    quantity + _numberMinted(msg.sender) < MAX_MINTS,\\n                    \\\"You can only mint 2 NFT\\\"\\n                );\\n                revert You_can_only_mint_2_NFT();\\n            }\\n        }\\n\\n        // if (msg.value < amount) {\\n        //     revert Not_Enough_Ethers_Sent();\\n        // }\\n        require(msg.value >= amount, \\\"Not Enough Ethers Sent\\\");\\n\\n        // if (block.timestamp < mint_Time) {\\n        //     revert Mint_Not_Yet_Started();\\n        // }\\n        require(block.timestamp >= mint_Time, \\\"Mint Not Yet Started\\\");\\n\\n        if (msg.sender != owner()) {\\n            if (checkSkull == true) {\\n                require(\\n                    Skull_Mints <= 5,\\n                    \\\"Not Enough Tokens Left for skullList\\\"\\n                );\\n                if (block.timestamp >= Skull_List_Time || totalSupply() >= 5) {\\n                    _safeMint(msg.sender, quantity);\\n                    Skull_Mints += quantity;\\n                } else {\\n                    revert Wait_Till_Skull_Mint_Starts();\\n                }\\n            } else if (checkWL == true) {\\n                require(WL_Mints <= 5, \\\"Not Enough Tokens Left for whitelist\\\");\\n                if (block.timestamp >= whiteList_Time || totalSupply() >= 10) {\\n                    _safeMint(msg.sender, quantity);\\n                    WL_Mints += quantity;\\n                } else {\\n                    revert WhiteListers_Still_Have_Time_To_Mint();\\n                }\\n            } else {\\n                require(Public_Mints < 15, \\\"Not Enough Tokens Left for public\\\");\\n                _safeMint(msg.sender, quantity);\\n                Public_Mints += quantity;\\n            }\\n        }\\n    }\\n\\n    function whiteList_MerkleVerify(bytes32[] memory proof, bytes32 leaf)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return MerkleProof.verify(proof, whiteList_root, leaf);\\n    }\\n\\n    function skullList_MerkleVerify(bytes32[] memory proof, bytes32 leaf)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return MerkleProof.verify(proof, skull_root, leaf);\\n    }\\n\\n    function add_WhiteList_Hash(bytes32 _root) public onlyOwner {\\n        whiteList_root = _root;\\n    }\\n\\n    function add_skullList_Hash(bytes32 _root) public onlyOwner {\\n        skull_root = _root;\\n    }\\n\\n    function ChangeOwner(address _OwnerAddress) public onlyOwner {\\n        OwnerAddress = _OwnerAddress;\\n    }\\n\\n    function withdraw() external payable onlyOwner {\\n        //Developer's stake\\n        uint256 ds = (address(this).balance * 25) / 100;\\n        payable(DeveloperAddress).transfer(ds);\\n\\n        //Owner's stake\\n        payable(OwnerAddress).transfer(address(this).balance);\\n    }\\n\\n    function setTimer(\\n        uint32 _stamp,\\n        uint32 _Skull_List_Time,\\n        uint32 _wl\\n    ) public onlyOwner {\\n        mint_Time = _stamp;\\n        Skull_List_Time = _Skull_List_Time;\\n        whiteList_Time = _wl;\\n    }\\n\\n    ////////////////////////////////\\n    // Royalty functionality\\n    ///////////////////////////////\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721A)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == 0x2a55205a || super.supportsInterface(interfaceId);\\n    }\\n\\n    function royaltyInfo(\\n        uint256, /*_tokenId */\\n        uint256 _salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount) {\\n        return (royaltyReceiver, calculateRoyalty(_salePrice));\\n    }\\n\\n    function calculateRoyalty(uint256 _salePrice)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return (_salePrice / 10000) * royaltyFeesInBips;\\n    }\\n\\n    function setRoyaltyInfo(address _receiver, uint96 _royaltyFeesInBips)\\n        public\\n        onlyOwner\\n    {\\n        royaltyReceiver = _receiver;\\n        royaltyFeesInBips = _royaltyFeesInBips;\\n    }\\n\\n    function setContractUri(string calldata _contractURI) public onlyOwner {\\n        contractURI = _contractURI;\\n    }\\n\\n    function setRootHashes(bytes32 _whiteList_root, bytes32 _skull_root)\\n        public\\n        onlyOwner\\n    {\\n        whiteList_root = _whiteList_root;\\n        skull_root = _skull_root;\\n    }\\n\\n    ///////////////////////////////////////////\\n\\n    function setStakeAddress(address _developer) public onlyOwner {\\n        DeveloperAddress = _developer;\\n        // PartnerAddress = _partner;\\n    }\\n\\n    function suppliedNFTs() public view returns (uint256) {\\n        return totalSupply();\\n    }\\n\\n    function userMint() public view returns (uint256) {\\n        return _numberMinted(msg.sender);\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    function setBaseURI(string calldata _baseUri) public onlyOwner {\\n        baseURI = _baseUri;\\n    }\\n}\\n\",\"keccak256\":\"0x45bdf5a0b1ef3bdfae1b934bb6818cfe558cd342403e6ee94b63683335de2b59\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260026009556109c4600d5566354a6ba7a18000600e55661ff973cafa8000600f556363381122601060006101000a81548163ffffffff021916908363ffffffff160217905550636337a7aa601060046101000a81548163ffffffff021916908363ffffffff160217905550636337c3ca601060086101000a81548163ffffffff021916908363ffffffff16021790555073b96dfc3e4cbe9da6f072d57c13b5efb44c8b192c6010600c6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550732e3d02c126e75ad3b4c95db3a78e83044d39bf31601160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040518060800160405280605b815260200162003fec605b9139601890805190602001906200016f929190620003ef565b503480156200017d57600080fd5b5060405162004047380380620040478339818101604052810190620001a391906200053f565b6040518060400160405280601581526020017f496e64696520536b756c6c2053796e64696361746500000000000000000000008152506040518060400160405280600381526020017f4953530000000000000000000000000000000000000000000000000000000000815250816002908051906020019062000227929190620003ef565b50806003908051906020019062000240929190620003ef565b50620002516200031c60201b60201c565b6000819055505050620002796200026d6200032160201b60201c565b6200032960201b60201c565b83601160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055508260149080519060200190620002c2929190620003ef565b50816015819055508060168190555033601260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050506200078a565b600090565b600033905090565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b828054620003fd906200067b565b90600052602060002090601f0160209004810192826200042157600085556200046d565b82601f106200043c57805160ff19168380011785556200046d565b828001600101855582156200046d579182015b828111156200046c5782518255916020019190600101906200044f565b5b5090506200047c919062000480565b5090565b5b808211156200049b57600081600090555060010162000481565b5090565b6000620004b6620004b084620005ed565b620005c4565b905082815260208101848484011115620004cf57600080fd5b620004dc84828562000645565b509392505050565b600081519050620004f58162000756565b92915050565b600082601f8301126200050d57600080fd5b81516200051f8482602086016200049f565b91505092915050565b600081519050620005398162000770565b92915050565b600080600080608085870312156200055657600080fd5b6000620005668782880162000528565b945050602085015167ffffffffffffffff8111156200058457600080fd5b6200059287828801620004fb565b9350506040620005a587828801620004e4565b9250506060620005b887828801620004e4565b91505092959194509250565b6000620005d0620005e3565b9050620005de8282620006b1565b919050565b6000604051905090565b600067ffffffffffffffff8211156200060b576200060a62000716565b5b620006168262000745565b9050602081019050919050565b6000819050919050565b60006bffffffffffffffffffffffff82169050919050565b60005b838110156200066557808201518184015260208101905062000648565b8381111562000675576000848401525b50505050565b600060028204905060018216806200069457607f821691505b60208210811415620006ab57620006aa620006e7565b5b50919050565b620006bc8262000745565b810181811067ffffffffffffffff82111715620006de57620006dd62000716565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b620007618162000623565b81146200076d57600080fd5b50565b6200077b816200062d565b81146200078757600080fd5b50565b613852806200079a6000396000f3fe6080604052600436106101f95760003560e01c806366ec7aa91161010d578063a9dc638e116100a0578063ccb4807b1161006f578063ccb4807b146106f0578063df8f460f14610719578063e985e9c514610744578063f285329214610781578063f2fde38b146107aa576101f9565b8063a9dc638e14610631578063b88d4fde1461065a578063c4d74a2114610676578063c87b56dd146106b3576101f9565b806395d89b41116100dc57806395d89b41146105755780639951f2df146105a0578063a22cb465146105cb578063a2e69613146105f4576101f9565b806366ec7aa9146104cd57806370a08231146104f6578063715018a6146105335780638da5cb5b1461054a576101f9565b806323471d181161019057806342842e0e1161015f57806342842e0e1461040657806355f804b3146104225780635929dbb01461044b5780635b885ed7146104745780636352211e14610490576101f9565b806323471d181461037957806323b872dd146103a25780632a55205a146103be5780633ccfd60b146103fc576101f9565b8063095ea7b3116101cc578063095ea7b3146102cc5780630f3886ef146102e8578063180f11d51461032557806318160ddd1461034e576101f9565b806301ffc9a7146101fe57806302fa7c471461023b57806306fdde0314610264578063081812fc1461028f575b600080fd5b34801561020a57600080fd5b5061022560048036038101906102209190612b16565b6107d3565b6040516102329190612faa565b60405180910390f35b34801561024757600080fd5b50610262600480360381019061025d9190612a21565b610815565b005b34801561027057600080fd5b50610279610893565b6040516102869190612fc5565b60405180910390f35b34801561029b57600080fd5b506102b660048036038101906102b19190612bad565b610925565b6040516102c39190612f1a565b60405180910390f35b6102e660048036038101906102e191906129e5565b6109a4565b005b3480156102f457600080fd5b5061030f600480360381019061030a9190612a5d565b610ae8565b60405161031c9190612faa565b60405180910390f35b34801561033157600080fd5b5061034c60048036038101906103479190612ada565b610aff565b005b34801561035a57600080fd5b50610363610b19565b6040516103709190613127565b60405180910390f35b34801561038557600080fd5b506103a0600480360381019061039b919061287a565b610b30565b005b6103bc60048036038101906103b791906128df565b610b7c565b005b3480156103ca57600080fd5b506103e560048036038101906103e09190612c3d565b610ea1565b6040516103f3929190612f81565b60405180910390f35b610404610edb565b005b610420600480360381019061041b91906128df565b610fd5565b005b34801561042e57600080fd5b5061044960048036038101906104449190612b68565b610ff5565b005b34801561045757600080fd5b50610472600480360381019061046d9190612c79565b611013565b005b61048e60048036038101906104899190612bd6565b611083565b005b34801561049c57600080fd5b506104b760048036038101906104b29190612bad565b61161f565b6040516104c49190612f1a565b60405180910390f35b3480156104d957600080fd5b506104f460048036038101906104ef9190612ab1565b611631565b005b34801561050257600080fd5b5061051d6004803603810190610518919061287a565b611643565b60405161052a9190613127565b60405180910390f35b34801561053f57600080fd5b506105486116fc565b005b34801561055657600080fd5b5061055f611710565b60405161056c9190612f1a565b60405180910390f35b34801561058157600080fd5b5061058a61173a565b6040516105979190612fc5565b60405180910390f35b3480156105ac57600080fd5b506105b56117cc565b6040516105c29190613127565b60405180910390f35b3480156105d757600080fd5b506105f260048036038101906105ed91906129a9565b6117db565b005b34801561060057600080fd5b5061061b60048036038101906106169190612bad565b6118e6565b6040516106289190613127565b60405180910390f35b34801561063d57600080fd5b5061065860048036038101906106539190612ab1565b611930565b005b610674600480360381019061066f919061292e565b611942565b005b34801561068257600080fd5b5061069d60048036038101906106989190612a5d565b6119b5565b6040516106aa9190612faa565b60405180910390f35b3480156106bf57600080fd5b506106da60048036038101906106d59190612bad565b6119cc565b6040516106e79190612fc5565b60405180910390f35b3480156106fc57600080fd5b5061071760048036038101906107129190612b68565b611a6b565b005b34801561072557600080fd5b5061072e611a89565b60405161073b9190613127565b60405180910390f35b34801561075057600080fd5b5061076b600480360381019061076691906128a3565b611a99565b6040516107789190612faa565b60405180910390f35b34801561078d57600080fd5b506107a860048036038101906107a3919061287a565b611b2d565b005b3480156107b657600080fd5b506107d160048036038101906107cc919061287a565b611b79565b005b6000632a55205a60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061080e575061080d82611bfd565b5b9050919050565b61081d611c8f565b81601260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080601160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055505050565b6060600280546108a2906133d0565b80601f01602080910402602001604051908101604052809291908181526020018280546108ce906133d0565b801561091b5780601f106108f05761010080835404028352916020019161091b565b820191906000526020600020905b8154815290600101906020018083116108fe57829003601f168201915b5050505050905090565b600061093082611d0d565b610966576040517fcf4700e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006109af8261161f565b90508073ffffffffffffffffffffffffffffffffffffffff166109d0611d6c565b73ffffffffffffffffffffffffffffffffffffffff1614610a33576109fc816109f7611d6c565b611a99565b610a32576040517fcfb3b94200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b826006600084815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b6000610af78360165484611d74565b905092915050565b610b07611c8f565b81601581905550806016819055505050565b6000610b23611d8b565b6001546000540303905090565b610b38611c8f565b806010600c6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000610b8782611d90565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610bee576040517fa114810000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080610bfa84611e5e565b91509150610c108187610c0b611d6c565b611e85565b610c5c57610c2586610c20611d6c565b611a99565b610c5b576040517f59c896be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415610cc3576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610cd08686866001611ec9565b8015610cdb57600082555b600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081546001900391905081905550600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815460010191905081905550610da985610d85888887611ecf565b7c020000000000000000000000000000000000000000000000000000000017611ef7565b600460008681526020019081526020016000208190555060007c020000000000000000000000000000000000000000000000000000000084161415610e31576000600185019050600060046000838152602001908152602001600020541415610e2f576000548114610e2e578360046000838152602001908152602001600020819055505b5b505b838573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610e998686866001611f22565b505050505050565b600080601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610ed0846118e6565b915091509250929050565b610ee3611c8f565b60006064601947610ef4919061328e565b610efe919061325d565b90506010600c9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610f68573d6000803e3d6000fd5b50601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610fd1573d6000803e3d6000fd5b5050565b610ff083838360405180602001604052806000815250611942565b505050565b610ffd611c8f565b81816018919061100e9291906125e7565b505050565b61101b611c8f565b82601060006101000a81548163ffffffff021916908363ffffffff16021790555081601060046101000a81548163ffffffff021916908363ffffffff16021790555080601060086101000a81548163ffffffff021916908363ffffffff160217905550505050565b600d548361108f610b19565b6110999190613207565b11156110da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d1906130c7565b60405180910390fd5b6110e482826119b5565b601760006101000a81548160ff0219169083151502179055506111078282610ae8565b601760016101000a81548160ff02191690831515021790555060011515601760019054906101000a900460ff16151514156111555782600f5461114a919061328e565b601381905550611194565b60011515601760009054906101000a900460ff161515141561117e576000601381905550611193565b82600e5461118c919061328e565b6013819055505b5b60011515601760009054906101000a900460ff16151514156112445760016111bb33611f28565b141561123f5760016111cc33611f28565b141561120d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120490613027565b60405180910390fd5b6040517f484df38100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6112eb565b60095461125033611f28565b8461125b9190613207565b11156112ea5760095461126d33611f28565b846112789190613207565b106112b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112af906130e7565b60405180910390fd5b6040517fdda0572c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b601354341015611330576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132790613067565b60405180910390fd5b601060009054906101000a900463ffffffff1663ffffffff1642101561138b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138290613107565b60405180910390fd5b611393611710565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461161a5760011515601760019054906101000a900460ff16151514156114ba576005600b541115611427576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141e90612fe7565b60405180910390fd5b601060049054906101000a900463ffffffff1663ffffffff164210158061145657506005611453610b19565b10155b15611483576114653384611f7f565b82600b60008282546114779190613207565b925050819055506114b5565b6040517f4becf70f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611619565b60011515601760009054906101000a900460ff16151514156115af576005600c54111561151c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151390613047565b60405180910390fd5b601060089054906101000a900463ffffffff1663ffffffff164210158061154b5750600a611548610b19565b10155b156115785761155a3384611f7f565b82600c600082825461156c9190613207565b925050819055506115aa565b6040517f214e222900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611618565b600f600a54106115f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115eb906130a7565b60405180910390fd5b6115fe3384611f7f565b82600a60008282546116109190613207565b925050819055505b5b5b505050565b600061162a82611d90565b9050919050565b611639611c8f565b8060158190555050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156116ab576040517f8f4eb60400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054169050919050565b611704611c8f565b61170e6000611f9d565b565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060038054611749906133d0565b80601f0160208091040260200160405190810160405280929190818152602001828054611775906133d0565b80156117c25780601f10611797576101008083540402835291602001916117c2565b820191906000526020600020905b8154815290600101906020018083116117a557829003601f168201915b5050505050905090565b60006117d6610b19565b905090565b80600760006117e8611d6c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16611895611d6c565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516118da9190612faa565b60405180910390a35050565b6000601160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166127108361191f919061325d565b611929919061328e565b9050919050565b611938611c8f565b8060168190555050565b61194d848484610b7c565b60008373ffffffffffffffffffffffffffffffffffffffff163b146119af5761197884848484612063565b6119ae576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b50505050565b60006119c48360155484611d74565b905092915050565b60606119d782611d0d565b611a0d576040517fa14c4b5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611a176121c3565b9050600081511415611a385760405180602001604052806000815250611a63565b80611a4284612255565b604051602001611a53929190612ef6565b6040516020818303038152906040525b915050919050565b611a73611c8f565b818160149190611a849291906125e7565b505050565b6000611a9433611f28565b905090565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611b35611c8f565b80601160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611b81611c8f565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611bf1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611be890613007565b60405180910390fd5b611bfa81611f9d565b50565b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611c5857506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611c885750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b611c976122ae565b73ffffffffffffffffffffffffffffffffffffffff16611cb5611710565b73ffffffffffffffffffffffffffffffffffffffff1614611d0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0290613087565b60405180910390fd5b565b600081611d18611d8b565b11158015611d27575060005482105b8015611d65575060007c0100000000000000000000000000000000000000000000000000000000600460008581526020019081526020016000205416145b9050919050565b600033905090565b600082611d8185846122b6565b1490509392505050565b600090565b60008082905080611d9f611d8b565b11611e2757600054811015611e265760006004600083815260200190815260200160002054905060007c010000000000000000000000000000000000000000000000000000000082161415611e24575b6000811415611e1a576004600083600190039350838152602001908152602001600020549050611def565b8092505050611e59565b505b5b6040517fdf2d9b4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b60008060006006600085815260200190815260200160002090508092508254915050915091565b600073ffffffffffffffffffffffffffffffffffffffff8316925073ffffffffffffffffffffffffffffffffffffffff821691508382148383141790509392505050565b50505050565b60008060e883901c905060e8611ee6868684612332565b62ffffff16901b9150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff83169250814260a01b178317905092915050565b50505050565b600067ffffffffffffffff6040600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054901c169050919050565b611f9982826040518060200160405280600081525061233b565b5050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612089611d6c565b8786866040518563ffffffff1660e01b81526004016120ab9493929190612f35565b602060405180830381600087803b1580156120c557600080fd5b505af19250505080156120f657506040513d601f19601f820116820180604052508101906120f39190612b3f565b60015b612170573d8060008114612126576040519150601f19603f3d011682016040523d82523d6000602084013e61212b565b606091505b50600081511415612168576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050949350505050565b6060601880546121d2906133d0565b80601f01602080910402602001604051908101604052809291908181526020018280546121fe906133d0565b801561224b5780601f106122205761010080835404028352916020019161224b565b820191906000526020600020905b81548152906001019060200180831161222e57829003601f168201915b5050505050905090565b606060a060405101806040526020810391506000825281835b60011561229957600184039350600a81066030018453600a810490508061229457612299565b61226e565b50828103602084039350808452505050919050565b600033905090565b60008082905060005b84518110156123275761231282868381518110612305577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516123d8565b9150808061231f90613433565b9150506122bf565b508091505092915050565b60009392505050565b6123458383612403565b60008373ffffffffffffffffffffffffffffffffffffffff163b146123d357600080549050600083820390505b6123856000868380600101945086612063565b6123bb576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8181106123725781600054146123d057600080fd5b50505b505050565b60008183106123f0576123eb82846125c0565b6123fb565b6123fa83836125c0565b5b905092915050565b6000805490506000821415612444576040517fb562e8dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6124516000848385611ec9565b600160406001901b178202600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506124c8836124b96000866000611ecf565b6124c2856125d7565b17611ef7565b6004600083815260200190815260200160002081905550600080838301905073ffffffffffffffffffffffffffffffffffffffff85169150828260007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4600183015b81811461256957808360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a460018101905061252e565b5060008214156125a5576040517f2e07630000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060008190555050506125bb6000848385611f22565b505050565b600082600052816020526040600020905092915050565b60006001821460e11b9050919050565b8280546125f3906133d0565b90600052602060002090601f016020900481019282612615576000855561265c565b82601f1061262e57803560ff191683800117855561265c565b8280016001018555821561265c579182015b8281111561265b578235825591602001919060010190612640565b5b509050612669919061266d565b5090565b5b8082111561268657600081600090555060010161266e565b5090565b600061269d61269884613167565b613142565b905080838252602082019050828560208602820111156126bc57600080fd5b60005b858110156126ec57816126d28882612788565b8452602084019350602083019250506001810190506126bf565b5050509392505050565b600061270961270484613193565b613142565b90508281526020810184848401111561272157600080fd5b61272c84828561338e565b509392505050565b6000813590506127438161377b565b92915050565b600082601f83011261275a57600080fd5b813561276a84826020860161268a565b91505092915050565b60008135905061278281613792565b92915050565b600081359050612797816137a9565b92915050565b6000813590506127ac816137c0565b92915050565b6000815190506127c1816137c0565b92915050565b600082601f8301126127d857600080fd5b81356127e88482602086016126f6565b91505092915050565b60008083601f84011261280357600080fd5b8235905067ffffffffffffffff81111561281c57600080fd5b60208301915083600182028301111561283457600080fd5b9250929050565b60008135905061284a816137d7565b92915050565b60008135905061285f816137ee565b92915050565b60008135905061287481613805565b92915050565b60006020828403121561288c57600080fd5b600061289a84828501612734565b91505092915050565b600080604083850312156128b657600080fd5b60006128c485828601612734565b92505060206128d585828601612734565b9150509250929050565b6000806000606084860312156128f457600080fd5b600061290286828701612734565b935050602061291386828701612734565b92505060406129248682870161283b565b9150509250925092565b6000806000806080858703121561294457600080fd5b600061295287828801612734565b945050602061296387828801612734565b93505060406129748782880161283b565b925050606085013567ffffffffffffffff81111561299157600080fd5b61299d878288016127c7565b91505092959194509250565b600080604083850312156129bc57600080fd5b60006129ca85828601612734565b92505060206129db85828601612773565b9150509250929050565b600080604083850312156129f857600080fd5b6000612a0685828601612734565b9250506020612a178582860161283b565b9150509250929050565b60008060408385031215612a3457600080fd5b6000612a4285828601612734565b9250506020612a5385828601612865565b9150509250929050565b60008060408385031215612a7057600080fd5b600083013567ffffffffffffffff811115612a8a57600080fd5b612a9685828601612749565b9250506020612aa785828601612788565b9150509250929050565b600060208284031215612ac357600080fd5b6000612ad184828501612788565b91505092915050565b60008060408385031215612aed57600080fd5b6000612afb85828601612788565b9250506020612b0c85828601612788565b9150509250929050565b600060208284031215612b2857600080fd5b6000612b368482850161279d565b91505092915050565b600060208284031215612b5157600080fd5b6000612b5f848285016127b2565b91505092915050565b60008060208385031215612b7b57600080fd5b600083013567ffffffffffffffff811115612b9557600080fd5b612ba1858286016127f1565b92509250509250929050565b600060208284031215612bbf57600080fd5b6000612bcd8482850161283b565b91505092915050565b600080600060608486031215612beb57600080fd5b6000612bf98682870161283b565b935050602084013567ffffffffffffffff811115612c1657600080fd5b612c2286828701612749565b9250506040612c3386828701612788565b9150509250925092565b60008060408385031215612c5057600080fd5b6000612c5e8582860161283b565b9250506020612c6f8582860161283b565b9150509250929050565b600080600060608486031215612c8e57600080fd5b6000612c9c86828701612850565b9350506020612cad86828701612850565b9250506040612cbe86828701612850565b9150509250925092565b612cd1816132e8565b82525050565b612ce0816132fa565b82525050565b6000612cf1826131c4565b612cfb81856131da565b9350612d0b81856020860161339d565b612d1481613538565b840191505092915050565b6000612d2a826131cf565b612d3481856131eb565b9350612d4481856020860161339d565b612d4d81613538565b840191505092915050565b6000612d63826131cf565b612d6d81856131fc565b9350612d7d81856020860161339d565b80840191505092915050565b6000612d966024836131eb565b9150612da182613549565b604082019050919050565b6000612db96026836131eb565b9150612dc482613598565b604082019050919050565b6000612ddc6017836131eb565b9150612de7826135e7565b602082019050919050565b6000612dff6024836131eb565b9150612e0a82613610565b604082019050919050565b6000612e226016836131eb565b9150612e2d8261365f565b602082019050919050565b6000612e456020836131eb565b9150612e5082613688565b602082019050919050565b6000612e686021836131eb565b9150612e73826136b1565b604082019050919050565b6000612e8b6016836131eb565b9150612e9682613700565b602082019050919050565b6000612eae6017836131eb565b9150612eb982613729565b602082019050919050565b6000612ed16014836131eb565b9150612edc82613752565b602082019050919050565b612ef08161335c565b82525050565b6000612f028285612d58565b9150612f0e8284612d58565b91508190509392505050565b6000602082019050612f2f6000830184612cc8565b92915050565b6000608082019050612f4a6000830187612cc8565b612f576020830186612cc8565b612f646040830185612ee7565b8181036060830152612f768184612ce6565b905095945050505050565b6000604082019050612f966000830185612cc8565b612fa36020830184612ee7565b9392505050565b6000602082019050612fbf6000830184612cd7565b92915050565b60006020820190508181036000830152612fdf8184612d1f565b905092915050565b6000602082019050818103600083015261300081612d89565b9050919050565b6000602082019050818103600083015261302081612dac565b9050919050565b6000602082019050818103600083015261304081612dcf565b9050919050565b6000602082019050818103600083015261306081612df2565b9050919050565b6000602082019050818103600083015261308081612e15565b9050919050565b600060208201905081810360008301526130a081612e38565b9050919050565b600060208201905081810360008301526130c081612e5b565b9050919050565b600060208201905081810360008301526130e081612e7e565b9050919050565b6000602082019050818103600083015261310081612ea1565b9050919050565b6000602082019050818103600083015261312081612ec4565b9050919050565b600060208201905061313c6000830184612ee7565b92915050565b600061314c61315d565b90506131588282613402565b919050565b6000604051905090565b600067ffffffffffffffff82111561318257613181613509565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156131ae576131ad613509565b5b6131b782613538565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006132128261335c565b915061321d8361335c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156132525761325161347c565b5b828201905092915050565b60006132688261335c565b91506132738361335c565b925082613283576132826134ab565b5b828204905092915050565b60006132998261335c565b91506132a48361335c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156132dd576132dc61347c565b5b828202905092915050565b60006132f38261333c565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b60006bffffffffffffffffffffffff82169050919050565b82818337600083830152505050565b60005b838110156133bb5780820151818401526020810190506133a0565b838111156133ca576000848401525b50505050565b600060028204905060018216806133e857607f821691505b602082108114156133fc576133fb6134da565b5b50919050565b61340b82613538565b810181811067ffffffffffffffff8211171561342a57613429613509565b5b80604052505050565b600061343e8261335c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156134715761347061347c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4e6f7420456e6f75676820546f6b656e73204c65667420666f7220736b756c6c60008201527f4c69737400000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f596f752063616e206f6e6c79206d696e742031204e4654000000000000000000600082015250565b7f4e6f7420456e6f75676820546f6b656e73204c65667420666f7220776869746560008201527f6c69737400000000000000000000000000000000000000000000000000000000602082015250565b7f4e6f7420456e6f756768204574686572732053656e7400000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4e6f7420456e6f75676820546f6b656e73204c65667420666f72207075626c6960008201527f6300000000000000000000000000000000000000000000000000000000000000602082015250565b7f4e6f7420456e6f75676820546f6b656e73204c65667400000000000000000000600082015250565b7f596f752063616e206f6e6c79206d696e742032204e4654000000000000000000600082015250565b7f4d696e74204e6f74205965742053746172746564000000000000000000000000600082015250565b613784816132e8565b811461378f57600080fd5b50565b61379b816132fa565b81146137a657600080fd5b50565b6137b281613306565b81146137bd57600080fd5b50565b6137c981613310565b81146137d457600080fd5b50565b6137e08161335c565b81146137eb57600080fd5b50565b6137f781613366565b811461380257600080fd5b50565b61380e81613376565b811461381957600080fd5b5056fea2646970667358221220f3bdae4623348e1370d46e98579e96af14862eb7ea6bc4b49cabd83bc0affda864736f6c6343000804003368747470733a2f2f697473736f6d657468696e676e66742e6d7970696e6174612e636c6f75642f697066732f516d5271627a645139476948634c6a6d3745667a795951314e726a7642436468666171585075523536574b6d34362f",
  "deployedBytecode": "0x6080604052600436106101f95760003560e01c806366ec7aa91161010d578063a9dc638e116100a0578063ccb4807b1161006f578063ccb4807b146106f0578063df8f460f14610719578063e985e9c514610744578063f285329214610781578063f2fde38b146107aa576101f9565b8063a9dc638e14610631578063b88d4fde1461065a578063c4d74a2114610676578063c87b56dd146106b3576101f9565b806395d89b41116100dc57806395d89b41146105755780639951f2df146105a0578063a22cb465146105cb578063a2e69613146105f4576101f9565b806366ec7aa9146104cd57806370a08231146104f6578063715018a6146105335780638da5cb5b1461054a576101f9565b806323471d181161019057806342842e0e1161015f57806342842e0e1461040657806355f804b3146104225780635929dbb01461044b5780635b885ed7146104745780636352211e14610490576101f9565b806323471d181461037957806323b872dd146103a25780632a55205a146103be5780633ccfd60b146103fc576101f9565b8063095ea7b3116101cc578063095ea7b3146102cc5780630f3886ef146102e8578063180f11d51461032557806318160ddd1461034e576101f9565b806301ffc9a7146101fe57806302fa7c471461023b57806306fdde0314610264578063081812fc1461028f575b600080fd5b34801561020a57600080fd5b5061022560048036038101906102209190612b16565b6107d3565b6040516102329190612faa565b60405180910390f35b34801561024757600080fd5b50610262600480360381019061025d9190612a21565b610815565b005b34801561027057600080fd5b50610279610893565b6040516102869190612fc5565b60405180910390f35b34801561029b57600080fd5b506102b660048036038101906102b19190612bad565b610925565b6040516102c39190612f1a565b60405180910390f35b6102e660048036038101906102e191906129e5565b6109a4565b005b3480156102f457600080fd5b5061030f600480360381019061030a9190612a5d565b610ae8565b60405161031c9190612faa565b60405180910390f35b34801561033157600080fd5b5061034c60048036038101906103479190612ada565b610aff565b005b34801561035a57600080fd5b50610363610b19565b6040516103709190613127565b60405180910390f35b34801561038557600080fd5b506103a0600480360381019061039b919061287a565b610b30565b005b6103bc60048036038101906103b791906128df565b610b7c565b005b3480156103ca57600080fd5b506103e560048036038101906103e09190612c3d565b610ea1565b6040516103f3929190612f81565b60405180910390f35b610404610edb565b005b610420600480360381019061041b91906128df565b610fd5565b005b34801561042e57600080fd5b5061044960048036038101906104449190612b68565b610ff5565b005b34801561045757600080fd5b50610472600480360381019061046d9190612c79565b611013565b005b61048e60048036038101906104899190612bd6565b611083565b005b34801561049c57600080fd5b506104b760048036038101906104b29190612bad565b61161f565b6040516104c49190612f1a565b60405180910390f35b3480156104d957600080fd5b506104f460048036038101906104ef9190612ab1565b611631565b005b34801561050257600080fd5b5061051d6004803603810190610518919061287a565b611643565b60405161052a9190613127565b60405180910390f35b34801561053f57600080fd5b506105486116fc565b005b34801561055657600080fd5b5061055f611710565b60405161056c9190612f1a565b60405180910390f35b34801561058157600080fd5b5061058a61173a565b6040516105979190612fc5565b60405180910390f35b3480156105ac57600080fd5b506105b56117cc565b6040516105c29190613127565b60405180910390f35b3480156105d757600080fd5b506105f260048036038101906105ed91906129a9565b6117db565b005b34801561060057600080fd5b5061061b60048036038101906106169190612bad565b6118e6565b6040516106289190613127565b60405180910390f35b34801561063d57600080fd5b5061065860048036038101906106539190612ab1565b611930565b005b610674600480360381019061066f919061292e565b611942565b005b34801561068257600080fd5b5061069d60048036038101906106989190612a5d565b6119b5565b6040516106aa9190612faa565b60405180910390f35b3480156106bf57600080fd5b506106da60048036038101906106d59190612bad565b6119cc565b6040516106e79190612fc5565b60405180910390f35b3480156106fc57600080fd5b5061071760048036038101906107129190612b68565b611a6b565b005b34801561072557600080fd5b5061072e611a89565b60405161073b9190613127565b60405180910390f35b34801561075057600080fd5b5061076b600480360381019061076691906128a3565b611a99565b6040516107789190612faa565b60405180910390f35b34801561078d57600080fd5b506107a860048036038101906107a3919061287a565b611b2d565b005b3480156107b657600080fd5b506107d160048036038101906107cc919061287a565b611b79565b005b6000632a55205a60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061080e575061080d82611bfd565b5b9050919050565b61081d611c8f565b81601260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080601160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055505050565b6060600280546108a2906133d0565b80601f01602080910402602001604051908101604052809291908181526020018280546108ce906133d0565b801561091b5780601f106108f05761010080835404028352916020019161091b565b820191906000526020600020905b8154815290600101906020018083116108fe57829003601f168201915b5050505050905090565b600061093082611d0d565b610966576040517fcf4700e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006109af8261161f565b90508073ffffffffffffffffffffffffffffffffffffffff166109d0611d6c565b73ffffffffffffffffffffffffffffffffffffffff1614610a33576109fc816109f7611d6c565b611a99565b610a32576040517fcfb3b94200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b826006600084815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b6000610af78360165484611d74565b905092915050565b610b07611c8f565b81601581905550806016819055505050565b6000610b23611d8b565b6001546000540303905090565b610b38611c8f565b806010600c6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000610b8782611d90565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610bee576040517fa114810000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080610bfa84611e5e565b91509150610c108187610c0b611d6c565b611e85565b610c5c57610c2586610c20611d6c565b611a99565b610c5b576040517f59c896be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415610cc3576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610cd08686866001611ec9565b8015610cdb57600082555b600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081546001900391905081905550600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815460010191905081905550610da985610d85888887611ecf565b7c020000000000000000000000000000000000000000000000000000000017611ef7565b600460008681526020019081526020016000208190555060007c020000000000000000000000000000000000000000000000000000000084161415610e31576000600185019050600060046000838152602001908152602001600020541415610e2f576000548114610e2e578360046000838152602001908152602001600020819055505b5b505b838573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610e998686866001611f22565b505050505050565b600080601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610ed0846118e6565b915091509250929050565b610ee3611c8f565b60006064601947610ef4919061328e565b610efe919061325d565b90506010600c9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610f68573d6000803e3d6000fd5b50601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610fd1573d6000803e3d6000fd5b5050565b610ff083838360405180602001604052806000815250611942565b505050565b610ffd611c8f565b81816018919061100e9291906125e7565b505050565b61101b611c8f565b82601060006101000a81548163ffffffff021916908363ffffffff16021790555081601060046101000a81548163ffffffff021916908363ffffffff16021790555080601060086101000a81548163ffffffff021916908363ffffffff160217905550505050565b600d548361108f610b19565b6110999190613207565b11156110da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d1906130c7565b60405180910390fd5b6110e482826119b5565b601760006101000a81548160ff0219169083151502179055506111078282610ae8565b601760016101000a81548160ff02191690831515021790555060011515601760019054906101000a900460ff16151514156111555782600f5461114a919061328e565b601381905550611194565b60011515601760009054906101000a900460ff161515141561117e576000601381905550611193565b82600e5461118c919061328e565b6013819055505b5b60011515601760009054906101000a900460ff16151514156112445760016111bb33611f28565b141561123f5760016111cc33611f28565b141561120d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120490613027565b60405180910390fd5b6040517f484df38100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6112eb565b60095461125033611f28565b8461125b9190613207565b11156112ea5760095461126d33611f28565b846112789190613207565b106112b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112af906130e7565b60405180910390fd5b6040517fdda0572c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b601354341015611330576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132790613067565b60405180910390fd5b601060009054906101000a900463ffffffff1663ffffffff1642101561138b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138290613107565b60405180910390fd5b611393611710565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461161a5760011515601760019054906101000a900460ff16151514156114ba576005600b541115611427576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141e90612fe7565b60405180910390fd5b601060049054906101000a900463ffffffff1663ffffffff164210158061145657506005611453610b19565b10155b15611483576114653384611f7f565b82600b60008282546114779190613207565b925050819055506114b5565b6040517f4becf70f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611619565b60011515601760009054906101000a900460ff16151514156115af576005600c54111561151c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151390613047565b60405180910390fd5b601060089054906101000a900463ffffffff1663ffffffff164210158061154b5750600a611548610b19565b10155b156115785761155a3384611f7f565b82600c600082825461156c9190613207565b925050819055506115aa565b6040517f214e222900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611618565b600f600a54106115f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115eb906130a7565b60405180910390fd5b6115fe3384611f7f565b82600a60008282546116109190613207565b925050819055505b5b5b505050565b600061162a82611d90565b9050919050565b611639611c8f565b8060158190555050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156116ab576040517f8f4eb60400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054169050919050565b611704611c8f565b61170e6000611f9d565b565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060038054611749906133d0565b80601f0160208091040260200160405190810160405280929190818152602001828054611775906133d0565b80156117c25780601f10611797576101008083540402835291602001916117c2565b820191906000526020600020905b8154815290600101906020018083116117a557829003601f168201915b5050505050905090565b60006117d6610b19565b905090565b80600760006117e8611d6c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16611895611d6c565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516118da9190612faa565b60405180910390a35050565b6000601160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166127108361191f919061325d565b611929919061328e565b9050919050565b611938611c8f565b8060168190555050565b61194d848484610b7c565b60008373ffffffffffffffffffffffffffffffffffffffff163b146119af5761197884848484612063565b6119ae576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b50505050565b60006119c48360155484611d74565b905092915050565b60606119d782611d0d565b611a0d576040517fa14c4b5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611a176121c3565b9050600081511415611a385760405180602001604052806000815250611a63565b80611a4284612255565b604051602001611a53929190612ef6565b6040516020818303038152906040525b915050919050565b611a73611c8f565b818160149190611a849291906125e7565b505050565b6000611a9433611f28565b905090565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611b35611c8f565b80601160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611b81611c8f565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611bf1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611be890613007565b60405180910390fd5b611bfa81611f9d565b50565b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611c5857506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611c885750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b611c976122ae565b73ffffffffffffffffffffffffffffffffffffffff16611cb5611710565b73ffffffffffffffffffffffffffffffffffffffff1614611d0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0290613087565b60405180910390fd5b565b600081611d18611d8b565b11158015611d27575060005482105b8015611d65575060007c0100000000000000000000000000000000000000000000000000000000600460008581526020019081526020016000205416145b9050919050565b600033905090565b600082611d8185846122b6565b1490509392505050565b600090565b60008082905080611d9f611d8b565b11611e2757600054811015611e265760006004600083815260200190815260200160002054905060007c010000000000000000000000000000000000000000000000000000000082161415611e24575b6000811415611e1a576004600083600190039350838152602001908152602001600020549050611def565b8092505050611e59565b505b5b6040517fdf2d9b4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b60008060006006600085815260200190815260200160002090508092508254915050915091565b600073ffffffffffffffffffffffffffffffffffffffff8316925073ffffffffffffffffffffffffffffffffffffffff821691508382148383141790509392505050565b50505050565b60008060e883901c905060e8611ee6868684612332565b62ffffff16901b9150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff83169250814260a01b178317905092915050565b50505050565b600067ffffffffffffffff6040600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054901c169050919050565b611f9982826040518060200160405280600081525061233b565b5050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612089611d6c565b8786866040518563ffffffff1660e01b81526004016120ab9493929190612f35565b602060405180830381600087803b1580156120c557600080fd5b505af19250505080156120f657506040513d601f19601f820116820180604052508101906120f39190612b3f565b60015b612170573d8060008114612126576040519150601f19603f3d011682016040523d82523d6000602084013e61212b565b606091505b50600081511415612168576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050949350505050565b6060601880546121d2906133d0565b80601f01602080910402602001604051908101604052809291908181526020018280546121fe906133d0565b801561224b5780601f106122205761010080835404028352916020019161224b565b820191906000526020600020905b81548152906001019060200180831161222e57829003601f168201915b5050505050905090565b606060a060405101806040526020810391506000825281835b60011561229957600184039350600a81066030018453600a810490508061229457612299565b61226e565b50828103602084039350808452505050919050565b600033905090565b60008082905060005b84518110156123275761231282868381518110612305577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516123d8565b9150808061231f90613433565b9150506122bf565b508091505092915050565b60009392505050565b6123458383612403565b60008373ffffffffffffffffffffffffffffffffffffffff163b146123d357600080549050600083820390505b6123856000868380600101945086612063565b6123bb576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8181106123725781600054146123d057600080fd5b50505b505050565b60008183106123f0576123eb82846125c0565b6123fb565b6123fa83836125c0565b5b905092915050565b6000805490506000821415612444576040517fb562e8dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6124516000848385611ec9565b600160406001901b178202600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506124c8836124b96000866000611ecf565b6124c2856125d7565b17611ef7565b6004600083815260200190815260200160002081905550600080838301905073ffffffffffffffffffffffffffffffffffffffff85169150828260007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4600183015b81811461256957808360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a460018101905061252e565b5060008214156125a5576040517f2e07630000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060008190555050506125bb6000848385611f22565b505050565b600082600052816020526040600020905092915050565b60006001821460e11b9050919050565b8280546125f3906133d0565b90600052602060002090601f016020900481019282612615576000855561265c565b82601f1061262e57803560ff191683800117855561265c565b8280016001018555821561265c579182015b8281111561265b578235825591602001919060010190612640565b5b509050612669919061266d565b5090565b5b8082111561268657600081600090555060010161266e565b5090565b600061269d61269884613167565b613142565b905080838252602082019050828560208602820111156126bc57600080fd5b60005b858110156126ec57816126d28882612788565b8452602084019350602083019250506001810190506126bf565b5050509392505050565b600061270961270484613193565b613142565b90508281526020810184848401111561272157600080fd5b61272c84828561338e565b509392505050565b6000813590506127438161377b565b92915050565b600082601f83011261275a57600080fd5b813561276a84826020860161268a565b91505092915050565b60008135905061278281613792565b92915050565b600081359050612797816137a9565b92915050565b6000813590506127ac816137c0565b92915050565b6000815190506127c1816137c0565b92915050565b600082601f8301126127d857600080fd5b81356127e88482602086016126f6565b91505092915050565b60008083601f84011261280357600080fd5b8235905067ffffffffffffffff81111561281c57600080fd5b60208301915083600182028301111561283457600080fd5b9250929050565b60008135905061284a816137d7565b92915050565b60008135905061285f816137ee565b92915050565b60008135905061287481613805565b92915050565b60006020828403121561288c57600080fd5b600061289a84828501612734565b91505092915050565b600080604083850312156128b657600080fd5b60006128c485828601612734565b92505060206128d585828601612734565b9150509250929050565b6000806000606084860312156128f457600080fd5b600061290286828701612734565b935050602061291386828701612734565b92505060406129248682870161283b565b9150509250925092565b6000806000806080858703121561294457600080fd5b600061295287828801612734565b945050602061296387828801612734565b93505060406129748782880161283b565b925050606085013567ffffffffffffffff81111561299157600080fd5b61299d878288016127c7565b91505092959194509250565b600080604083850312156129bc57600080fd5b60006129ca85828601612734565b92505060206129db85828601612773565b9150509250929050565b600080604083850312156129f857600080fd5b6000612a0685828601612734565b9250506020612a178582860161283b565b9150509250929050565b60008060408385031215612a3457600080fd5b6000612a4285828601612734565b9250506020612a5385828601612865565b9150509250929050565b60008060408385031215612a7057600080fd5b600083013567ffffffffffffffff811115612a8a57600080fd5b612a9685828601612749565b9250506020612aa785828601612788565b9150509250929050565b600060208284031215612ac357600080fd5b6000612ad184828501612788565b91505092915050565b60008060408385031215612aed57600080fd5b6000612afb85828601612788565b9250506020612b0c85828601612788565b9150509250929050565b600060208284031215612b2857600080fd5b6000612b368482850161279d565b91505092915050565b600060208284031215612b5157600080fd5b6000612b5f848285016127b2565b91505092915050565b60008060208385031215612b7b57600080fd5b600083013567ffffffffffffffff811115612b9557600080fd5b612ba1858286016127f1565b92509250509250929050565b600060208284031215612bbf57600080fd5b6000612bcd8482850161283b565b91505092915050565b600080600060608486031215612beb57600080fd5b6000612bf98682870161283b565b935050602084013567ffffffffffffffff811115612c1657600080fd5b612c2286828701612749565b9250506040612c3386828701612788565b9150509250925092565b60008060408385031215612c5057600080fd5b6000612c5e8582860161283b565b9250506020612c6f8582860161283b565b9150509250929050565b600080600060608486031215612c8e57600080fd5b6000612c9c86828701612850565b9350506020612cad86828701612850565b9250506040612cbe86828701612850565b9150509250925092565b612cd1816132e8565b82525050565b612ce0816132fa565b82525050565b6000612cf1826131c4565b612cfb81856131da565b9350612d0b81856020860161339d565b612d1481613538565b840191505092915050565b6000612d2a826131cf565b612d3481856131eb565b9350612d4481856020860161339d565b612d4d81613538565b840191505092915050565b6000612d63826131cf565b612d6d81856131fc565b9350612d7d81856020860161339d565b80840191505092915050565b6000612d966024836131eb565b9150612da182613549565b604082019050919050565b6000612db96026836131eb565b9150612dc482613598565b604082019050919050565b6000612ddc6017836131eb565b9150612de7826135e7565b602082019050919050565b6000612dff6024836131eb565b9150612e0a82613610565b604082019050919050565b6000612e226016836131eb565b9150612e2d8261365f565b602082019050919050565b6000612e456020836131eb565b9150612e5082613688565b602082019050919050565b6000612e686021836131eb565b9150612e73826136b1565b604082019050919050565b6000612e8b6016836131eb565b9150612e9682613700565b602082019050919050565b6000612eae6017836131eb565b9150612eb982613729565b602082019050919050565b6000612ed16014836131eb565b9150612edc82613752565b602082019050919050565b612ef08161335c565b82525050565b6000612f028285612d58565b9150612f0e8284612d58565b91508190509392505050565b6000602082019050612f2f6000830184612cc8565b92915050565b6000608082019050612f4a6000830187612cc8565b612f576020830186612cc8565b612f646040830185612ee7565b8181036060830152612f768184612ce6565b905095945050505050565b6000604082019050612f966000830185612cc8565b612fa36020830184612ee7565b9392505050565b6000602082019050612fbf6000830184612cd7565b92915050565b60006020820190508181036000830152612fdf8184612d1f565b905092915050565b6000602082019050818103600083015261300081612d89565b9050919050565b6000602082019050818103600083015261302081612dac565b9050919050565b6000602082019050818103600083015261304081612dcf565b9050919050565b6000602082019050818103600083015261306081612df2565b9050919050565b6000602082019050818103600083015261308081612e15565b9050919050565b600060208201905081810360008301526130a081612e38565b9050919050565b600060208201905081810360008301526130c081612e5b565b9050919050565b600060208201905081810360008301526130e081612e7e565b9050919050565b6000602082019050818103600083015261310081612ea1565b9050919050565b6000602082019050818103600083015261312081612ec4565b9050919050565b600060208201905061313c6000830184612ee7565b92915050565b600061314c61315d565b90506131588282613402565b919050565b6000604051905090565b600067ffffffffffffffff82111561318257613181613509565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156131ae576131ad613509565b5b6131b782613538565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006132128261335c565b915061321d8361335c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156132525761325161347c565b5b828201905092915050565b60006132688261335c565b91506132738361335c565b925082613283576132826134ab565b5b828204905092915050565b60006132998261335c565b91506132a48361335c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156132dd576132dc61347c565b5b828202905092915050565b60006132f38261333c565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b60006bffffffffffffffffffffffff82169050919050565b82818337600083830152505050565b60005b838110156133bb5780820151818401526020810190506133a0565b838111156133ca576000848401525b50505050565b600060028204905060018216806133e857607f821691505b602082108114156133fc576133fb6134da565b5b50919050565b61340b82613538565b810181811067ffffffffffffffff8211171561342a57613429613509565b5b80604052505050565b600061343e8261335c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156134715761347061347c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4e6f7420456e6f75676820546f6b656e73204c65667420666f7220736b756c6c60008201527f4c69737400000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f596f752063616e206f6e6c79206d696e742031204e4654000000000000000000600082015250565b7f4e6f7420456e6f75676820546f6b656e73204c65667420666f7220776869746560008201527f6c69737400000000000000000000000000000000000000000000000000000000602082015250565b7f4e6f7420456e6f756768204574686572732053656e7400000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4e6f7420456e6f75676820546f6b656e73204c65667420666f72207075626c6960008201527f6300000000000000000000000000000000000000000000000000000000000000602082015250565b7f4e6f7420456e6f75676820546f6b656e73204c65667400000000000000000000600082015250565b7f596f752063616e206f6e6c79206d696e742032204e4654000000000000000000600082015250565b7f4d696e74204e6f74205965742053746172746564000000000000000000000000600082015250565b613784816132e8565b811461378f57600080fd5b50565b61379b816132fa565b81146137a657600080fd5b50565b6137b281613306565b81146137bd57600080fd5b50565b6137c981613310565b81146137d457600080fd5b50565b6137e08161335c565b81146137eb57600080fd5b50565b6137f781613366565b811461380257600080fd5b50565b61380e81613376565b811461381957600080fd5b5056fea2646970667358221220f3bdae4623348e1370d46e98579e96af14862eb7ea6bc4b49cabd83bc0affda864736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the number of tokens in `owner`'s account."
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "isApprovedForAll(address,address)": {
        "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}."
      },
      "name()": {
        "details": "Returns the token collection name."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Equivalent to `safeTransferFrom(from, to, tokenId, '')`."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) to learn more about how these ids are created. This function call must use less than 30000 gas."
      },
      "symbol()": {
        "details": "Returns the token collection symbol."
      },
      "tokenURI(uint256)": {
        "details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
      },
      "totalSupply()": {
        "details": "Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ApprovalCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "ApprovalQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "BalanceQueryForZeroAddress()": [
        {
          "notice": "Cannot query the balance for the zero address."
        }
      ],
      "MintERC2309QuantityExceedsLimit()": [
        {
          "notice": "The `quantity` minted with ERC2309 exceeds the safety limit."
        }
      ],
      "MintToZeroAddress()": [
        {
          "notice": "Cannot mint to the zero address."
        }
      ],
      "MintZeroQuantity()": [
        {
          "notice": "The quantity of tokens minted must be more than zero."
        }
      ],
      "OwnerQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "OwnershipNotInitializedForExtraData()": [
        {
          "notice": "The `extraData` cannot be set on an unintialized ownership slot."
        }
      ],
      "TransferCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "TransferFromIncorrectOwner()": [
        {
          "notice": "The token must be owned by `from`."
        }
      ],
      "TransferToNonERC721ReceiverImplementer()": [
        {
          "notice": "Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
        }
      ],
      "TransferToZeroAddress()": [
        {
          "notice": "Cannot transfer to the zero address."
        }
      ],
      "URIQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 728,
        "contract": "contracts/indie-skull-contract.sol:skullSyndicate",
        "label": "_currentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 730,
        "contract": "contracts/indie-skull-contract.sol:skullSyndicate",
        "label": "_burnCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 732,
        "contract": "contracts/indie-skull-contract.sol:skullSyndicate",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 734,
        "contract": "contracts/indie-skull-contract.sol:skullSyndicate",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 738,
        "contract": "contracts/indie-skull-contract.sol:skullSyndicate",
        "label": "_packedOwnerships",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 742,
        "contract": "contracts/indie-skull-contract.sol:skullSyndicate",
        "label": "_packedAddressData",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 747,
        "contract": "contracts/indie-skull-contract.sol:skullSyndicate",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(TokenApprovalRef)660_storage)"
      },
      {
        "astId": 753,
        "contract": "contracts/indie-skull-contract.sol:skullSyndicate",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7,
        "contract": "contracts/indie-skull-contract.sol:skullSyndicate",
        "label": "_owner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 2493,
        "contract": "contracts/indie-skull-contract.sol:skullSyndicate",
        "label": "MAX_MINTS",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2495,
        "contract": "contracts/indie-skull-contract.sol:skullSyndicate",
        "label": "Public_Mints",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2497,
        "contract": "contracts/indie-skull-contract.sol:skullSyndicate",
        "label": "Skull_Mints",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2499,
        "contract": "contracts/indie-skull-contract.sol:skullSyndicate",
        "label": "WL_Mints",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2502,
        "contract": "contracts/indie-skull-contract.sol:skullSyndicate",
        "label": "MAX_SUPPLY",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2505,
        "contract": "contracts/indie-skull-contract.sol:skullSyndicate",
        "label": "mint_Price",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 2508,
        "contract": "contracts/indie-skull-contract.sol:skullSyndicate",
        "label": "skull_List_Mint_Price",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 2511,
        "contract": "contracts/indie-skull-contract.sol:skullSyndicate",
        "label": "mint_Time",
        "offset": 0,
        "slot": "16",
        "type": "t_uint32"
      },
      {
        "astId": 2514,
        "contract": "contracts/indie-skull-contract.sol:skullSyndicate",
        "label": "Skull_List_Time",
        "offset": 4,
        "slot": "16",
        "type": "t_uint32"
      },
      {
        "astId": 2517,
        "contract": "contracts/indie-skull-contract.sol:skullSyndicate",
        "label": "whiteList_Time",
        "offset": 8,
        "slot": "16",
        "type": "t_uint32"
      },
      {
        "astId": 2520,
        "contract": "contracts/indie-skull-contract.sol:skullSyndicate",
        "label": "DeveloperAddress",
        "offset": 12,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 2523,
        "contract": "contracts/indie-skull-contract.sol:skullSyndicate",
        "label": "OwnerAddress",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 2525,
        "contract": "contracts/indie-skull-contract.sol:skullSyndicate",
        "label": "royaltyFeesInBips",
        "offset": 20,
        "slot": "17",
        "type": "t_uint96"
      },
      {
        "astId": 2527,
        "contract": "contracts/indie-skull-contract.sol:skullSyndicate",
        "label": "royaltyReceiver",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      },
      {
        "astId": 2529,
        "contract": "contracts/indie-skull-contract.sol:skullSyndicate",
        "label": "amount",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 2531,
        "contract": "contracts/indie-skull-contract.sol:skullSyndicate",
        "label": "contractURI",
        "offset": 0,
        "slot": "20",
        "type": "t_string_storage"
      },
      {
        "astId": 2533,
        "contract": "contracts/indie-skull-contract.sol:skullSyndicate",
        "label": "whiteList_root",
        "offset": 0,
        "slot": "21",
        "type": "t_bytes32"
      },
      {
        "astId": 2535,
        "contract": "contracts/indie-skull-contract.sol:skullSyndicate",
        "label": "skull_root",
        "offset": 0,
        "slot": "22",
        "type": "t_bytes32"
      },
      {
        "astId": 2537,
        "contract": "contracts/indie-skull-contract.sol:skullSyndicate",
        "label": "checkWL",
        "offset": 0,
        "slot": "23",
        "type": "t_bool"
      },
      {
        "astId": 2539,
        "contract": "contracts/indie-skull-contract.sol:skullSyndicate",
        "label": "checkSkull",
        "offset": 1,
        "slot": "23",
        "type": "t_bool"
      },
      {
        "astId": 2542,
        "contract": "contracts/indie-skull-contract.sol:skullSyndicate",
        "label": "baseURI",
        "offset": 0,
        "slot": "24",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(TokenApprovalRef)660_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721A.TokenApprovalRef)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenApprovalRef)660_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(TokenApprovalRef)660_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.TokenApprovalRef",
        "members": [
          {
            "astId": 659,
            "contract": "contracts/indie-skull-contract.sol:skullSyndicate",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}